{"version":3,"file":"regexp-events.es.min.js","sources":["../src/utils.js","../node_modules/lodash.isstring/index.js","../node_modules/lodash.isfunction/index.js","../node_modules/lodash.isnil/index.js","../src/Event.js","../src/Emitter.js"],"sourcesContent":["export function clearListeners(eventMap, eventType, force){\r\n\tif(force)\r\n\t\teventMap.delete(eventType);\r\n\telse{\r\n\t\tlet listeners = eventMap.get(eventType);\r\n\t\tlisteners.filter(listener => listener.removable).forEach((listener, i) => {\r\n\t\t\tlisteners.splice(listeners.indexOf(listener), 1);\r\n\t\t});\r\n\r\n\t\t// if there are not listeners left, remove the array\r\n\t\tif(listeners.length === 0)\r\n\t\t\teventMap.delete(eventType);\r\n\t}\r\n}\r\n\r\nexport function regexpEqual(r1, r2){\r\n\treturn (\r\n\t\tr1 instanceof RegExp &&\r\n\t\tr2 instanceof RegExp &&\r\n\t\tr2.source === r1.source &&\r\n\t\tr2.global === r1.global &&\r\n\t\tr2.ignoreCase === r1.ignoreCase &&\r\n\t\tr2.multiline === r1.multiline &&\r\n\t\tr2.sticky === r1.sticky &&\r\n\t\tr2.unicode === r1.unicode\r\n\t);\r\n}","/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n","/**\n * lodash 3.0.8 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array constructors, and\n  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isFunction;\n","/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","/**\r\n * @classdesc the basic event class\r\n * @class Event\r\n */\r\nexport default class Event{\r\n\t/**\r\n\t * @param  {String} type - the type of event, this can be anything, but its a good idea just to make it a string\r\n\t * @param  {Emitter} target - the emitter that is firing this event\r\n\t * @param  {Array} data - an array of arguments that is used on the listener functions\r\n\t * @return {Event}\r\n\t */\r\n\tconstructor(type, target, data){\r\n\t\t/**\r\n\t\t * the type of event, this can be anything, but its a good idea to to make it a string\r\n\t\t * @type {String}\r\n\t\t */\r\n\t\tthis.type = type;\r\n\r\n\t\t/**\r\n\t\t * a reference to the emitter that fired the event\r\n\t\t * @type {Emitter}\r\n\t\t */\r\n\t\tthis.target = target;\r\n\r\n\t\t/**\r\n\t\t * an array of arguments that are used when calling the listener function\r\n\t\t * @type {Array}\r\n\t\t */\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n","import Event from './Event';\r\nimport {clearListeners, regexpEqual} from './utils';\r\nimport isString from 'lodash.isstring';\r\nimport isFunction from 'lodash.isfunction';\r\nimport isNil from 'lodash.isnil';\r\n\r\n/**\r\n * a simple event emitter\r\n */\r\nexport default class Emitter{\r\n\tconstructor(){\r\n\t\t/**\r\n\t\t * whether to suppress all events on this emitter\r\n\t\t * @type {Boolean}\r\n\t\t */\r\n\t\tthis.suppressEvents = false;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the Map that is used to store events for emitters\r\n\t * @param {Emitter} emitter\r\n\t * @return {WeakMap}\r\n\t */\r\n\tstatic getEventMap(emitter){\r\n\t\tlet map = this.events || (this.events = new WeakMap());\r\n\t\treturn map.get(emitter);\r\n\t}\r\n\r\n\t/**\r\n\t * creates a new Map for the emitter\r\n\t * @param {Emitter} emitter\r\n\t * @return {WeakMap}\r\n\t */\r\n\tstatic createEventMap(emitter){\r\n\t\tlet map = this.events || (this.events = new WeakMap());\r\n\t\tlet events = new Map();\r\n\t\tmap.set(emitter, events);\r\n\t\treturn events;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the Map used to store events\r\n\t * @return {Map}\r\n\t */\r\n\tget eventMap() {\r\n\t\treturn Emitter.getEventMap(this);\r\n\t}\r\n\r\n\t/**\r\n\t * listens for an event of this emitter\r\n\t * @param  {RegExp|String|Event} type\r\n\t * @param  {Function} func - the function to be called when the event fires\r\n\t * @param  {*} [ctx] - the context to run the function under\r\n\t * @param  {Boolean} [removable=true] - whether this listener can be removed without force\r\n\t * @return {this}\r\n\t */\r\n\ton(type, func, ctx, removable = true){\r\n\t\tif(isNil(type))\r\n\t\t\tthrow new Error('Emitter.on requires a String or a RegExp as the first argument');\r\n\r\n\t\tif(!isFunction(func))\r\n\t\t\tthrow new Error('Emitter.on requires a function as the second argument');\r\n\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tif(!eventMap)\r\n\t\t\teventMap = Emitter.createEventMap(this);\r\n\r\n\t\tif(type instanceof Event)\r\n\t\t\ttype = type.type;\r\n\r\n\t\tif(!eventMap.has(type))\r\n\t\t\teventMap.set(type, []);\r\n\r\n\t\teventMap.get(type).push({\r\n\t\t\tfunc: func,\r\n\t\t\tctx: ctx,\r\n\t\t\tonce: false,\r\n\t\t\tremovable: removable\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * binds a listener that removes its self once the event is fired\r\n\t * @param  {RegExp|String|Event} type\r\n\t * @param  {Function} func\r\n\t * @param  {*} [ctx] - the context to run the functions under\r\n\t * @return {this}\r\n\t *\r\n\t * TODO: make once() accept a \"removable\" flag 15/4/17\r\n\t */\r\n\tonce(type, func, ctx){\r\n\t\tif(isNil(type))\r\n\t\t\tthrow new Error('Emitter.once requires a String or a RegExp as the first argument');\r\n\r\n\t\tif(!isFunction(func))\r\n\t\t\tthrow new Error('Emitter.once requires a function as the second argument');\r\n\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tif(!eventMap)\r\n\t\t\teventMap = Emitter.createEventMap(this);\r\n\r\n\t\tif(type instanceof Event)\r\n\t\t\ttype = type.type;\r\n\r\n\t\tif(!eventMap.has(type))\r\n\t\t\teventMap.set(type, []);\r\n\r\n\t\teventMap.get(type).push({\r\n\t\t\tfunc: func,\r\n\t\t\tctx: ctx,\r\n\t\t\tonce: true,\r\n\t\t\tremovable: true\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * removes a listener\r\n\t * NOTE: this dose not take a \"force\" flag, since to remove a listener through this method you have to provide the exact type, function, and ctx\r\n\t * @param  {RegExp|String|Event} type\r\n\t * @param  {Function} func - this has to be the exact function that was bound\r\n\t * @param  {*} [ctx] - this has to be the exact context that was bound with the listener\r\n\t * @return {this}\r\n\t */\r\n\toff(type, func, ctx){\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tlet eventType = type;\r\n\r\n\t\t// if there is not event map, just exit\r\n\t\tif(!eventMap)\r\n\t\t\treturn this;\r\n\r\n\t\tif(eventType instanceof Event)\r\n\t\t\teventType = type.type;\r\n\r\n\t\tif(!eventMap.has(eventType))\r\n\t\t\teventMap.set(eventType, []);\r\n\r\n\t\tif(isString(type)){\r\n\t\t\tlet listeners = eventMap.get(eventType);\r\n\t\t\tlisteners.forEach((listener, i) => {\r\n\t\t\t\t// done bother about force in this situation, because the user provied the exact type, function, and ctx\r\n\t\t\t\tif(listener.func === func && ctx === listener.ctx)\r\n\t\t\t\t\tlisteners.splice(i,1);\r\n\t\t\t});\r\n\r\n\t\t\t// remove the listener array if there are no listeners left\r\n\t\t\tif(listeners.length === 0)\r\n\t\t\t\teventMap.delete(eventType);\r\n\t\t}\r\n\t\telse if(eventType instanceof RegExp){\r\n\t\t\teventMap.forEach((listeners, listenersEventType) => {\r\n\t\t\t\t// if the regexp flags and source match then remove the listeners\r\n\t\t\t\tif(listenersEventType instanceof RegExp && regexpEqual(eventType, listenersEventType)){\r\n\t\t\t\t\tlisteners.forEach((listener, i) => {\r\n\t\t\t\t\t\tif(listener.func === func && ctx === listener.ctx)\r\n\t\t\t\t\t\t\tlisteners.splice(i,1);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// remove the listener array if there are no listeners left\r\n\t\t\t\t\tif(listeners.length === 0)\r\n\t\t\t\t\t\teventMap.delete(listenersEventType);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * fires ad event on this emitter\r\n\t * @param {String|Event} type\r\n\t * @param {...*} args - the arguments to be passed to the listeners\r\n\t * @return {this}\r\n\t */\r\n\temit(type, ...args){\r\n\t\tif(this.suppressEvents) return;\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tlet event;\r\n\r\n\t\t// if there is not event map, just exit\r\n\t\tif(!eventMap)\r\n\t\t\treturn this;\r\n\r\n\t\t// if its an event use the events type\r\n\t\tif(type instanceof Event)\r\n\t\t\tevent = type;\r\n\t\telse\r\n\t\t\tevent = new Event(type, this, args);\r\n\r\n\t\tlet listenerArgs = Array.from(args).concat([event]);\r\n\t\teventMap.forEach((listeners, listenersEventType) => {\r\n\t\t\tif(\r\n\t\t\t\t// if they are both strings and they match\r\n\t\t\t\t(isString(event.type) && listenersEventType === event.type) ||\r\n\t\t\t\t// if the listenersEventType is a RegExp and the event type is a string, see if they match\r\n\t\t\t\t(isString(event.type) && listenersEventType instanceof RegExp && listenersEventType.test(event.type)) ||\r\n\t\t\t\t// if they are both RegExp see if they match\r\n\t\t\t\t(event.type instanceof RegExp && listenersEventType instanceof RegExp && regexpEqual(listenersEventType, event.type))\r\n\t\t\t){\r\n\t\t\t\tlisteners.forEach(listener => {\r\n\t\t\t\t\tlistener.func.apply(listener.ctx, listenerArgs);\r\n\t\t\t\t\tif(listener.once)\r\n\t\t\t\t\t\tthis.off(event.type, listener.func, listener.ctx);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * removes all events of \"type\"\r\n\t * NOTE: passing no arguments will clean all listens\r\n\t * NOTE: passing a single boolean will clear all listens and act as the force flag\r\n\t * @param {RegExp|String|Event|Boolean} [type] - the type of event\r\n\t * @param {Boolean} [force = false] - whether to force remove the listeners\r\n\t * @param {Boolean} [useRegExp = true] - whether to use the RegExp to test other types\r\n\t * @return {this}\r\n\t */\r\n\tclear(type, force = false, useRegExp = true){\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tlet eventType = type;\r\n\r\n\t\t// if there is not event map, just exit\r\n\t\tif(!eventMap)\r\n\t\t\treturn this;\r\n\r\n\t\tif(isString(eventType)){\r\n\t\t\tclearListeners(eventMap, eventType, force);\r\n\t\t}\r\n\t\telse if(eventType instanceof Event){\r\n\t\t\tthis.clear(eventType.type, useRegExp, force);\r\n\t\t}\r\n\t\telse if(eventType instanceof RegExp){\r\n\t\t\tArray.from(eventMap).map(a => a[0]).forEach(listenersEventType => {\r\n\t\t\t\tif(\r\n\t\t\t\t\t// if the string matches the regex\r\n\t\t\t\t\t(isString(listenersEventType) && useRegExp && eventType.test(listenersEventType)) ||\r\n\t\t\t\t\t// if the regex(s) match\r\n\t\t\t\t\t(listenersEventType instanceof RegExp && regexpEqual(listenersEventType, eventType))\r\n\t\t\t\t){\r\n\t\t\t\t\tclearListeners(eventMap, listenersEventType, force);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(eventType === true){\r\n\t\t\teventMap.clear();\r\n\t\t}\r\n\t\telse if(eventType === false || eventType === undefined){\r\n\t\t\teventMap.forEach((listeners, type) => {\r\n\t\t\t\tlisteners.filter(listener => listener.removable).forEach(listener => {\r\n\t\t\t\t\tlisteners.splice(listeners.indexOf(listener), 1);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// if there are not listeners left, remove array\r\n\t\t\t\tif(listeners.length === 0)\r\n\t\t\t\t\teventMap.delete(type);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the number of listeners bound to the event\r\n\t * @param  {RegExp|String|Event} [type]\r\n\t * @param {Boolean} [useRegExp] - whether to use the RegExp to test other types\r\n\t * @return {Boolean}\r\n\t */\r\n\tcount(type, useRegExp = true){\r\n\t\tlet eventMap = this.eventMap;\r\n\t\tlet eventType = type;\r\n\r\n\t\t// if there is not event map, just exit\r\n\t\tif(!eventMap)\r\n\t\t\treturn 0;\r\n\r\n\t\tif(isString(eventType)){\r\n\t\t\treturn eventMap.has(eventType) ? eventMap.get(eventType).length : 0;\r\n\t\t}\r\n\t\telse if(eventType instanceof Event){\r\n\t\t\treturn eventMap.has(eventType.type) ? eventMap.get(eventType.type).length : 0;\r\n\t\t}\r\n\t\telse if(eventType instanceof RegExp){\r\n\t\t\tlet total = 0;\r\n\t\t\teventMap.forEach((listeners, listenersEventType) => {\r\n\t\t\t\tif(isString(listenersEventType) && useRegExp && eventType.test(listenersEventType))\r\n\t\t\t\t\ttotal += listeners.length;\r\n\t\t\t\telse if(regexpEqual(listenersEventType, eventType))\r\n\t\t\t\t\ttotal += listeners.length;\r\n\t\t\t});\r\n\t\t\treturn total;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlet total = 0;\r\n\t\t\teventMap.forEach((listeners, eventType) => {\r\n\t\t\t\ttotal += listeners.length;\r\n\t\t\t});\r\n\t\t\treturn total;\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["clearListeners","eventMap","eventType","force","delete","listeners","get","filter","listener","removable","forEach","i","splice","indexOf","length","regexpEqual","r1","r2","RegExp","source","global","ignoreCase","multiline","sticky","unicode","isObjectLike","value","isString","isArray","objectToString","call","stringTag","isFunction","tag","isObject","funcTag","genTag","type","isNil","Event","[object Object]","target","data","this","objectProto","Object","prototype","toString","Array","Emitter","suppressEvents","emitter","events","WeakMap","map","Map","set","getEventMap","func","ctx","Error","createEventMap","has","push","once","listenersEventType","args","event","listenerArgs","from","concat","test","apply","off","useRegExp","clear","a","undefined","total"],"mappings":"AAAO,QAASA,gBAAeC,EAAUC,EAAWC,GACnD,GAAGA,EACFF,EAASG,OAAOF,OACb,CACH,GAAIG,GAAYJ,EAASK,IAAIJ,EAC7BG,GAAUE,OAAOC,GAAYA,EAASC,WAAWC,QAAQ,CAACF,EAAUG,KACnEN,EAAUO,OAAOP,EAAUQ,QAAQL,GAAW,KAIvB,IAArBH,EAAUS,QACZb,EAASG,OAAOF,IAInB,QAAgBa,aAAYC,EAAIC,GAC/B,MACCD,aAAcE,SACdD,YAAcC,SACdD,EAAGE,SAAWH,EAAGG,QACjBF,EAAGG,SAAWJ,EAAGI,QACjBH,EAAGI,aAAeL,EAAGK,YACrBJ,EAAGK,YAAcN,EAAGM,WACpBL,EAAGM,SAAWP,EAAGO,QACjBN,EAAGO,UAAYR,EAAGQ,QC6CpB,QAASC,cAAaC,GACpB,QAASA,GAAyB,gBAATA,GAmB3B,QAASC,UAASD,GAChB,MAAuB,gBAATA,KACVE,QAAQF,IAAUD,aAAaC,IAAUG,eAAeC,KAAKJ,IAAUK,UCrD7E,QAASC,YAAWN,GAIlB,GAAIO,GAAMC,SAASR,GAASG,iBAAeC,KAAKJ,GAAS,EACzD,OAAOO,IAAOE,SAAWF,GAAOG,OA0BlC,QAASF,UAASR,GAChB,GAAIW,SAAcX,EAClB,SAASA,IAAkB,UAARW,GAA4B,YAARA,GC3CzC,QAASC,OAAMZ,GACb,MAAgB,OAATA,OCzBYa,OAOpBC,YAAYH,EAAMI,EAAQC,GAKzBC,KAAKN,KAAOA,EAMZM,KAAKF,OAASA,EAMdE,KAAKD,KAAOA,GHlBd,GAAIX,WAAY,kBAGZa,YAAcC,OAAOC,UAMrBjB,eAAiBe,YAAYG,SAyB7BnB,QAAUoB,MAAMpB,cAkDHD,SCpFbQ,QAAU,oBACVC,OAAS,6BAGTQ,cAAcC,OAAOC,UAMrBjB,iBAAiBe,cAAYG,iBAsDhBf,mBC1CAM,WEvBIW,SACpBT,cAKCG,KAAKO,gBAAiB,EAQvBV,mBAAmBW,GAElB,OADUR,KAAKS,SAAWT,KAAKS,OAAS,GAAIC,WACjC/C,IAAI6C,GAQhBX,sBAAsBW,GACrB,GAAIG,GAAMX,KAAKS,SAAWT,KAAKS,OAAS,GAAIC,UACxCD,EAAS,GAAIG,IAEjB,OADAD,GAAIE,IAAIL,EAASC,GACVA,EAORnD,eACC,MAAOgD,SAAQQ,YAAYd,MAW5BH,GAAGH,EAAMqB,EAAMC,EAAKlD,GAAY,GAC/B,GAAG6B,QAAMD,GACR,KAAM,IAAIuB,OAAM,iEAEjB,KAAI5B,QAAW0B,GACd,KAAM,IAAIE,OAAM,wDAEjB,IAAI3D,GAAW0C,KAAK1C,QAgBpB,OAfIA,KACHA,EAAWgD,QAAQY,eAAelB,OAEhCN,YAAgBE,SAClBF,EAAOA,EAAKA,MAETpC,EAAS6D,IAAIzB,IAChBpC,EAASuD,IAAInB,MAEdpC,EAASK,IAAI+B,GAAM0B,MAClBL,KAAMA,EACNC,IAAKA,EACLK,MAAM,EACNvD,UAAWA,IAELkC,KAYRH,KAAKH,EAAMqB,EAAMC,GAChB,GAAGrB,QAAMD,GACR,KAAM,IAAIuB,OAAM,mEAEjB,KAAI5B,QAAW0B,GACd,KAAM,IAAIE,OAAM,0DAEjB,IAAI3D,GAAW0C,KAAK1C,QAgBpB,OAfIA,KACHA,EAAWgD,QAAQY,eAAelB,OAEhCN,YAAgBE,SAClBF,EAAOA,EAAKA,MAETpC,EAAS6D,IAAIzB,IAChBpC,EAASuD,IAAInB,MAEdpC,EAASK,IAAI+B,GAAM0B,MAClBL,KAAMA,EACNC,IAAKA,EACLK,MAAM,EACNvD,WAAW,IAELkC,KAWRH,IAAIH,EAAMqB,EAAMC,GACf,GAAI1D,GAAW0C,KAAK1C,SAChBC,EAAYmC,CAGhB,KAAIpC,EACH,MAAO0C,KAQR,IANGzC,YAAqBqC,SACvBrC,EAAYmC,EAAKA,MAEdpC,EAAS6D,IAAI5D,IAChBD,EAASuD,IAAItD,MAEXyB,MAASU,GAAM,CACjB,GAAIhC,GAAYJ,EAASK,IAAIJ,EAC7BG,GAAUK,QAAQ,CAACF,EAAUG,KAEzBH,EAASkD,OAASA,GAAQC,IAAQnD,EAASmD,KAC7CtD,EAAUO,OAAOD,EAAE,KAIG,IAArBN,EAAUS,QACZb,EAASG,OAAOF,OAEVA,aAAqBgB,SAC5BjB,EAASS,QAAQ,CAACL,EAAW4D,KAEzBA,YAA8B/C,SAAUH,YAAYb,EAAW+D,KACjE5D,EAAUK,QAAQ,CAACF,EAAUG,KACzBH,EAASkD,OAASA,GAAQC,IAAQnD,EAASmD,KAC7CtD,EAAUO,OAAOD,EAAE,KAIG,IAArBN,EAAUS,QACZb,EAASG,OAAO6D,KAKpB,OAAOtB,MASRH,KAAKH,KAAS6B,GACb,IAAGvB,KAAKO,eAAR,CACA,GACIiB,GADAlE,EAAW0C,KAAK1C,QAIpB,KAAIA,EACH,MAAO0C,KAIPwB,GADE9B,YAAgBE,OACVF,EAEA,GAAIE,OAAMF,EAAMM,KAAMuB,EAE/B,IAAIE,GAAepB,MAAMqB,KAAKH,GAAMI,QAAQH,GAkB5C,OAjBAlE,GAASS,QAAQ,CAACL,EAAW4D,MAG1BtC,MAASwC,EAAM9B,OAAS4B,IAAuBE,EAAM9B,MAErDV,MAASwC,EAAM9B,OAAS4B,YAA8B/C,SAAU+C,EAAmBM,KAAKJ,EAAM9B,OAE9F8B,EAAM9B,eAAgBnB,SAAU+C,YAA8B/C,SAAUH,YAAYkD,EAAoBE,EAAM9B,QAE/GhC,EAAUK,QAAQF,IACjBA,EAASkD,KAAKc,MAAMhE,EAASmD,IAAKS,EAC/B5D,GAASwD,MACXrB,KAAK8B,IAAIN,EAAM9B,KAAM7B,EAASkD,KAAMlD,EAASmD,SAK1ChB,MAYRH,MAAMH,EAAMlC,GAAQ,EAAOuE,GAAY,GACtC,GAAIzE,GAAW0C,KAAK1C,SAChBC,EAAYmC,CAGhB,OAAIpC,IAGD0B,MAASzB,GACXF,eAAeC,EAAUC,EAAWC,GAE7BD,YAAqBqC,OAC5BI,KAAKgC,MAAMzE,EAAUmC,KAAMqC,EAAWvE,GAE/BD,YAAqBgB,QAC5B8B,MAAMqB,KAAKpE,GAAUqD,IAAIsB,GAAKA,EAAE,IAAIlE,QAAQuD,KAGzCtC,MAASsC,IAAuBS,GAAaxE,EAAUqE,KAAKN,IAE5DA,YAA8B/C,SAAUH,YAAYkD,EAAoB/D,KAEzEF,eAAeC,EAAUgE,EAAoB9D,MAI1B,IAAdD,EACPD,EAAS0E,SAEY,IAAdzE,OAAqC2E,KAAd3E,GAC9BD,EAASS,QAAQ,CAACL,EAAWgC,KAC5BhC,EAAUE,OAAOC,GAAYA,EAASC,WAAWC,QAAQF,IACxDH,EAAUO,OAAOP,EAAUQ,QAAQL,GAAW,IAIvB,KAArBH,EAAUS,QACZb,EAASG,OAAOiC,KAIZM,MAnCCA,KA4CTH,MAAMH,EAAMqC,GAAY,GACvB,GAAIzE,GAAW0C,KAAK1C,SAChBC,EAAYmC,CAGhB,KAAIpC,EACH,MAAO,EAER,IAAG0B,MAASzB,GACX,MAAOD,GAAS6D,IAAI5D,GAAaD,EAASK,IAAIJ,GAAWY,OAAS,CAE9D,IAAGZ,YAAqBqC,OAC5B,MAAOtC,GAAS6D,IAAI5D,EAAUmC,MAAQpC,EAASK,IAAIJ,EAAUmC,MAAMvB,OAAS,CAExE,IAAGZ,YAAqBgB,QAAO,CACnC,GAAI4D,GAAQ,CAOZ,OANA7E,GAASS,QAAQ,CAACL,EAAW4D,KACzBtC,MAASsC,IAAuBS,GAAaxE,EAAUqE,KAAKN,GAC9Da,GAASzE,EAAUS,OACZC,YAAYkD,EAAoB/D,KACvC4E,GAASzE,EAAUS,UAEdgE,EAEJ,CACH,GAAIA,GAAQ,CAIZ,OAHA7E,GAASS,QAAQ,CAACL,EAAWH,KAC5B4E,GAASzE,EAAUS,SAEbgE"}